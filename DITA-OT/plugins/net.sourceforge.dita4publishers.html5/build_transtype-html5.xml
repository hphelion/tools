<?xml version="1.0" encoding="utf-8"?><project name="dita2html5" default="dita2html5">


  <!-- test to see where the plugin is located, plugins or demo -->
  <dirname property="html5.dir" file="${ant.file.dita2html5}"></dirname>
  
  <property name="default.settings" value="${html5.dir}/setting.properties"></property>
  
  <available file="${default.settings}" property="setting.present"></available>

	<target name="dita2html5" unless="noMap" depends="d4p.map-driven-build-init,build-init,preprocess,html5">
  </target>

  <target name="html5" unless="noMap" depends="dita.map.html5"></target>
    
    <target name="load.settings" description="Load theme settings if exists" if="setting.present" unless="html5.site.theme">
    	<echo>Loading html5.site.theme from settings</echo>
    	<loadproperties srcFile="${default.settings}"></loadproperties>
    </target>
    
  <target name="html5.theme.init" depends="load.settings" description="Init HTML5 theme properties">
     <condition property="html5.site.theme" value="d4p-classic">
		  <not>
        <isset property="html5.site.theme"></isset>
      </not>
	</condition>
	
	<condition property="html5.dir.libs" value="libs">
		  <not>
        <isset property="html5.dir.libs"></isset>
      </not>
	</condition>
	
	
	 <condition property="html5.site.config" value="${html5.dir}/${html5.dir.libs}/themes/${html5.site.theme}/config.xml">
		  <not>
        <isset property="html5.site.config"></isset>
      </not>
	</condition>
	
		<xmlproperty file="${html5.site.config}" collapseAttributes="true" semanticAttributes="true"></xmlproperty>
		
		<echoproperties>
    		<propertyset>
      			<propertyref prefix="html5."></propertyref>
    		</propertyset>
  		</echoproperties>
  </target>

  <target name="html5.theme.build" if="html5.theme.compile" depends="html5.theme.init" description="Compile HTML5 theme">
    <ant dir="${html5.dir}/${html5.dir.libs}/" antfile="build.xml">
  		<property name="properties" value="${html5.site.theme}"></property>
	</ant>  
  </target>

  <target name="dita.map.html5.init" depends="html5.theme.build" description="Init properties for HTML5">
	
	<condition property="html5.site.js.vars" value="${html5.dir}/${html5.dir.libs}/themes/${html5.site.theme}/vars.xml">
		  <not>
        <isset property="html5.site.js.vars"></isset>
      </not>
	</condition>
	
	
    <available file="${html5.site.js.vars}" property="html5.site.js.vars.exists"></available>
	
	<condition property="html5.themes.output.dir" value="themes">
	  <not>
        <isset property="args.debug"></isset>
      </not>
	</condition>
	
	<condition property="html5.themes.output.dir" value="libs">
        <isset property="args.debug"></isset>  
	</condition>
	
	<condition property="http.absolute.uri" value="">
	  <not>
        <isset property="http.absolute.uri"></isset>
      </not>
	</condition>

    <property name="d4p.is.map.driven" value="true"></property>

    <condition property="topics.output.dir" value="topics">
  		<not>
  			<isset property="topics.output.dir"></isset>
  	  </not>
  	</condition>
  	
  	<condition property="html5.grid.prefix" value="grid_">
  		<not>
  			<isset property="html5.grid.prefix"></isset>
  	  </not>
  	</condition>

  	<!-- The name of the directory, within the output package, to contain all images: -->

    <condition property="images.output.dir" value="images">
  		<not>
    	  <isset property="images.output.dir"></isset>
  		</not>
    </condition>

  	<property name="html5.temp.dir" value="${dita.temp.dir}${file.separator}html5_temp"></property>

  	<!-- Defines the @class value to use for topic elements generated for topicheads. -->
  	<condition property="title.only.topic.class.spec" value="- topic/topic ">
  		<not>
    	  <isset property="title.only.topic.class.spec"></isset>
  		</not>
  	</condition>

  	<!-- Defines the @class value to use for topic title elements generated for topicheads. -->
  	<condition property="title.only.topic.title.class.spec" value="- topic/title ">
  		<not>
    	  <isset property="title.only.topic.title.class.spec"></isset>
  		</not>
  	</condition>

    <basename property="dita.map.toc.root" file="${dita.input.filename}" suffix=".ditamap"></basename>

    <condition property="args.html5.toc" value="${dita.map.toc.root}">
      <not>
        <isset property="args.html5.toc"></isset>
      </not>
    </condition>

    <condition property="out.ext" value=".html">
      <not>
        <isset property="out.ext"></isset>
      </not>
    </condition>

    <condition property="noPlugin">
      <equals arg1="${dita.html5.plugin}" arg2="no"></equals>
    </condition>

    <condition property="args.compression.suffix" value="-min">
      <not>
        <isset property="args.debug"></isset>
      </not>
    </condition>
    
    <condition property="args.compression.suffix" value="">
        <isset property="args.debug"></isset>
    </condition>       
    
    <condition property="args.css.filename" value="style">
      <not>
        <isset property="args.css.filename"></isset>
      </not>
    </condition>
 
    <condition property="args.css.extension" value=".css">
      <not>
        <isset property="args.css.extension"></isset>
      </not>
    </condition> 
    
    <condition property="args.js.extension" value=".js">
      <not>
        <isset property="args.js.extension"></isset>
      </not>
    </condition>   
		
	<condition property="args.css.file" value="">
      <not>
        <isset property="args.css.file"></isset>
      </not>
    </condition>
    
     <condition property="args.js.filename" value="script">
      <not>
        <isset property="args.js.filename"></isset>
      </not>
    </condition>
    
    <condition property="html5.args.theme.file" value="themes/${html5.site.theme}/css/${args.css.filename}${args.compression.suffix}${args.css.extension}">
      <not>
        <isset property="html5.args.theme.file"></isset>
      </not>
    </condition>
    
	<condition property="args.js.file" value="themes/${html5.site.theme}/js/${args.js.filename}${args.compression.suffix}${args.js.extension}">
      <not>
        <isset property="args.js.file"></isset>
      </not>
    </condition>    
    
    <condition property="css.output.dir" value="css">
      <not>
        <isset property="args.css.output.dir"></isset>
      </not>
    </condition>
    
	<condition property="lib.html5.dir.libs" value="libs">
      <not>
        <isset property="lib.html5.dir.libs"></isset>
      </not>
    </condition>
    
     <condition property="html5.themes.output.dir" value="themes">
      <not>
        <isset property="html5.themes.output.dir"></isset>
      </not>
    </condition>

    <!--condition property="css.output.dir" value="${args.css.output.dir}">
      <isset property="args.css.output.dir" />
    </condition-->

    <condition property="html5.doJavaScriptFileCopy">
    	<!-- For now just always do it. -->
  	  	<equals arg1="true" arg2="true"></equals>
   </condition>

    <condition property="html5.do.copy.graphics" value="true">
  		<not>
  			<isset property="html5.do.copy.graphics"></isset>
  	  </not>
  	</condition>
  	
  	<!-- 
  	    output navigation in different ways
  	    - navigation-default: a standard navigation (for left or right size)
  	    - navigation-tabbed:  a tabbed navigation
  	               You need a limited number of items 
  	              at the first level for this !important
  	-->
  	 <condition property="html5.navigation.markup" value="navigation-default">
  		<not>
  			<isset property="html5.navigation.markup"></isset>
  	  </not>
  	</condition>

    <condition property="html5.id.main.container" value="d4h5-main-container">
  		<not>
  			<isset property="html5.id.main.container"></isset>
  	  </not>
  	</condition>
  	
  	<condition property="html5.id.section.container" value="d4h5-section-container">
  		<not>
  			<isset property="html5.id.section.container"></isset>
  	  </not>
  	</condition>
  	
  	<condition property="html5.class.main.container" value="container_12">
  		<not>
  			<isset property="html5.class.main.container"></isset>
  	  </not>
  	</condition>
  	
  	 <condition property="html5.class.section.container" value="">
  		<not>
  			<isset property="html5.class.section.container"></isset>
  	  </not>
  	</condition>
  	  
  	<condition property="html5.id.main.content" value="d4h5-main-content">
  		<not>
  			<isset property="html5.id.main.content"></isset>
  	  </not>
  	</condition>
  	
  	<condition property="html5.id.navigation" value="local-navigation">
  		<not>
  			<isset property="html5.id.navigation"></isset>
  	  </not>
  	</condition>
  	
  	<condition property="html5.class.main.content" value="grid_8">
  		<not>
  			<isset property="html5.class.main.content"></isset>
  	  </not>
  	</condition>  	
  	
  	<condition property="html5.class.navigation" value="grid_4">
		  <not>
        <isset property="html5.class.navigation"></isset>
      </not>
	</condition>

	<!-- used to pass parameter to the javascript d4p obj -->
	<condition property="html5.js.options" value="">
		  <not>
        <isset property="html5.js.options"></isset>
      </not>
	</condition>
	
	<condition property="html5.class.body" value="centered img-with-shadow paged  ${html5.navigation.markup}">
		  <not>
        <isset property="html5.class.body"></isset>
      </not>
	</condition>
    
    <condition property="d4p.html5.json.vars.dir" value="${dita.temp.dir}/json">
      <not>
        <isset property="d4p.html5.json.vars.dir"></isset>
      </not>
    </condition>
	
    <condition property="d4p.html5.json.vars.file" value="${d4p.html5.json.vars.dir}/vars.json">
		  <not>
		    <isset property="d4p.html5.json.vars.file"></isset>
      </not>
	</condition>
	
		
  	<echo message="+++ html5-specific properties:"></echo>
  	<echoproperties format="text" regex="^(html5|html2|css|user|out\.)" taskname="echo"></echoproperties>
  </target>
  
  <target name="check-html5-json-vars-urls" if="html5.site.js.vars.exists">
  
      <makeurl file="${d4p.html5.json.vars.file}" property="d4p.html5.json.vars.file.url"></makeurl>
      
  </target>

  <target name="dita.map.html5" depends="dita.map.html5.init, html5-copy-assets, html5-copy-libs, xmltojsonvars, check-html5-json-vars-urls" description="Generate html5 components from input map and topics">

  	<mkdir dir="${html5.temp.dir}"></mkdir>
  	<makeurl file="${output.dir}" property="html5.xslt.outdir"></makeurl>
  	<makeurl file="${dita.temp.dir}" property="html5.xslt.tempdir"></makeurl>
    <makeurl file="${html5.site.config}" property="html5.xml.theme.config"></makeurl>    
    <makeurl file="${dita.input.valfile}" property="dita.input.valfile.url" validate="no"></makeurl>    
    
     <condition property="d4p.html5.json.vars.file.url" value="">
		  <not>
        <isset property="d4p.html5.json.vars.file.url"></isset>
      </not>
	</condition>
	
    
    

    <echo message="d4p.html5.json.vars.file=${d4p.html5.json.vars.file}"></echo>
    
    <echo message="d4p.html5.json.vars.file.url=${d4p.html5.json.vars.file.url}"></echo>
    
  	<property name="map2html5.style" location="${html5.dir}/xsl/map2html5.xsl"></property>
  	<property name="args.xhtml.toc" value="index"></property>

    <xslt processor="trax" basedir="${dita.temp.dir}" destdir="${output.dir}" includesfile="${dita.temp.dir}${file.separator}${user.input.file.listfile}" classpathref="dost.class.path" style="${map2html5.style}" filenameparameter="inputFileNameParam">

      
    		
	
<param name="siteTheme" expression="${html5.site.theme}"></param>
	
<param name="BODYCLASS" expression="${html5.class.body}"></param>
	
<param name="jsoptions" expression="${html5.js.options}"></param>
	
<param name="cssOutputDir" expression="${css.output.dir}"></param>
	
<param name="debug" expression="${debug}"></param>
	
<param name="fileOrganizationStrategy" expression="${html2.file.organization.strategy}" if="html2.file.organization.strategy"></param>
	
<param name="generateDynamicToc" expression="${html5.generate.dynamic.toc}" if="html5.generate.dynamic.toc"></param>
	
<param name="generateStaticToc" expression="${html2.generate.static.toc}" if="html2.generate.static.toc"></param>
	
<param name="generateGlossary" expression="${html2.generate.glossary}" if="html2.generate.glossary"></param>
	
<param name="generateIndex" expression="${html2.generate.index}" if="html2.generate.index"></param>
	
<param name="mathJaxUseCDNLink" expression="${html2.mathjax.use.cdn.link}" if="html2.mathjax.use.cdn.link"></param>
	
<param name="mathJaxUseLocalLink" expression="${html2.mathjax.use.local.link}" if="html2.mathjax.use.local.link"></param>
	
<param name="mathJaxLocalJavascriptUri" expression="${html2.mathjax.local.javascript.uri}" if="html2.mathjax.local.javascript.uri"></param>
	
<param name="imagesOutputDir" expression="${images.output.dir}"></param>
	
<param name="outdir" expression="${html5.xslt.outdir}"></param>
     	
	<!-- configuration file -->
	
<param name="HTML5THEMECONFIG" expression="${html5.xml.theme.config}"></param> 	
     	
	<!-- NOTE: Case of OUTEXT matches parameter used in base HTML transform type -->
    
<param name="OUTEXT" expression="${out.ext}"></param><!-- Extension to use for result files, e.g., ".html" -->
    
<param name="tempdir" expression="${html5.xslt.tempdir}"></param>
    
<param name="rawPlatformString" expression="${os.name}"></param>
    
<param name="titleOnlyTopicClassSpec" expression="${title.only.topic.class.spec}"></param>
    
<param name="titleOnlyTopicTitleClassSpec" expression="${title.only.topic.title.class.spec}"></param>
    
<param name="topicsOutputDir" expression="${topics.output.dir}"></param>
	
<param name="TRANSTYPE" expression="${transtype}" if="{transtype"></param>
	
    <!-- Parameters from dita2xhtml and similar transtypes: -->
    
<param name="WORKDIR" expression="${workdir}" if="workdir"></param>
    
<param name="CSS" expression="${args.css.file}" if="args.css.file"></param>     
	
<param name="HTML5THEMEDIR" expression="${html5.themes.output.dir}" if="html5.args.theme.file"></param> 
    
<param name="CSSTHEME" expression="${html5.args.theme.file}" if="html5.args.theme.file"></param> 
    
<param name="HTML5D4PINIT" expression="$html5.d4p.init}"></param>
    
<param name="JSONVARFILE" expression="${d4p.html5.json.vars.file.url}" if="d4p.html5.json.vars.file.url"></param>
    
<param name="NAVIGATIONMARKUP" expression="${html5.navigation.markup}" if="html5.navigation.markup"></param>

    
<param name="IDMAINCONTAINER" expression="${html5.id.main.container}" if="html5.id.main.container"></param>
    
<param name="IDSECTIONCONTAINER" expression="${html5.id.section.container}" if="html5.id.section.container"></param>  
    
<param name="IDMAINCONTENT" expression="${html5.id.main.content}" if="html5.id.main.content"></param>
    
<param name="CLASSMAINCONTENT" expression="${html5.class.main.content}" if="html5.class.main.content"></param>
    
<param name="CLASSMAINCONTAINER" expression="${html5.class.main.container}" if="html5.class.main.container"></param>
    
<param name="CLASSSECTIONCONTAINER" expression="${html5.class.section.container}" if="html5.class.main.container"></param>
		
    
<param name="CLASSNAVIGATION" expression="${html5.class.navigation}" if="html5.class.navigation"></param>     
    
<param name="IDLOCALNAV" expression="${html5.id.navigation}" if="html5.id.navigation"></param>    
    
<param name="GRIDPREFIX" expression="${html5.grid.prefix}" if="html5.grid.prefix"></param>
    
<param name="JS" expression="${args.js.file}" if="args.js.file"></param>
    
<param name="CSSPATH" expression="${user.csspath}" if="user.csspath"></param>
    
<param name="DRAFT" expression="${args.draft}" if="args.draft"></param>
    
<param name="ARTLBL" expression="${args.artlbl}" if="args.artlbl"></param>
    
<param name="GENERATE-TASK-LABELS" expression="${args.gen.task.lbl}" if="args.gen.task.lbl"></param>
    
<param name="PRESERVE-DITA-CLASS" expression="${args.xhtml.classattr}" if="args.xhtml.classattr"></param>
    
<param name="NOPARENTLINK" expression="${args.hide.parent.link}" if="args.hide.parent.link"></param>
    
<param name="BREADCRUMBS" expression="${args.breadcrumbs}" if="args.breadcrumbs"></param>
    
<param name="INDEXSHOW" expression="${args.indexshow}" if="args.indexshow"></param>
    
<param name="OUTPUTDIR" expression="${output.dir}"></param>
    
<param name="FILEDIR" expression="."></param>
    
<param name="BASEDIR" expression="${basedir}"></param>
    
<param name="FILTERFILE" expression="${dita.input.valfile.url}" if="dita.input.valfile"></param>
    
<param name="HTTPABSOLUTEURI" expression="${http.absolute.uri}" if="http.absolute.uri"></param>
    
    
<param name="DBG" expression="${args.debug}" if="args.debug"></param>


    	
      <mapper type="glob" from="${user.input.file}" to="${args.xhtml.toc}${out.ext}"></mapper>
              
              
    </xslt>

  	<condition property="skip.copy.graphics" value="${local.skip.copy.graphics}">
  		<isset property="local.skip.copy.graphics"></isset>
  	</condition>

  	<antcall target="html5.copy.graphics">
  		<param name="do.copy.graphics" value="${local.skip.copy.graphics}"></param>
  	</antcall>
  </target>

  <target name="html5.copy.graphics" unless="skip.copy.graphics" description="Copies graphics from input to the output directory based on the graphic map generated during html5 generation">
  	<ant antfile="${output.dir}/copy-graphics.xml">
  	</ant>
    </target>

  <target name="html5-copy-dyntoc-javascript" description="Copy JavaScript files" depends="dita.map.html5.init" if="html5.doDynTocFileCopy">
  	<copy todir="${output.dir}">
  		<fileset dir="${html5.dir}/dynamic-toc-support">
  			<include name="**/*"></include>
  		</fileset>
  	</copy>

	</target>

  <target name="html5-copy-css" description="Copy CSS files" depends="dita.map.html5.init">
    <condition property="user.copycss.yes">
      <isset property="args.css.present"></isset>
    </condition>
    <property name="user.csspath.real" value="${output.dir}${file.separator}${css.output.dir}"></property>
    <mkdir dir="${user.csspath.real}"></mkdir>
    <!-- Always copy system default css files -->
    <copy todir="${user.csspath.real}">
      <fileset dir="${dita.resource.dir}" includes="*.css"></fileset>
    </copy>
    <copy todir="${output.dir}">
      <fileset dir="${dita.resource.dir}" includes="*.css"></fileset>
    </copy>
  	<copy todir="${user.csspath.real}">
  		<fileset dir="${html5.dir}/css">
  			<include name="**/*"></include>
  	  </fileset>
  	</copy>
    <!-- Copy user specify css file when required -->
    <antcall target="html5-copy-css-user"></antcall>
    <antcall target="html5-copy-javascript"></antcall>
  </target>

  <target name="html5-copy-assets" description="Copy assets files for production" depends="dita.map.html5.init" unless="args.debug">

    <mkdir dir="${output.dir}/${html5.themes.output.dir}/${html5.site.theme}"></mkdir>
    
    <copy todir="${output.dir}/${html5.themes.output.dir}/${html5.site.theme}">
      <fileset dir="${html5.dir}/${html5.themes.output.dir}/${html5.site.theme}"></fileset>
    </copy>

  </target>
  
  <target name="check.libs.exists" description="Check if the library directory exists in the output directory">
    <condition property="html5.themes.output.dir.exists">
    	<available file="${output.dir}/${lib.html5.dir.libs}" type="dir"></available>
    </condition>
    
    <condition property="html5.prevent.copy.libs">
     	<isset property="html5.themes.output.dir.exists"></isset>
    </condition>
</target>
  
  <target name="confirm.libs.exists" description="Output confirmation message if the library directory exists in the output directory" if="html5.themes.output.dir.exists">
    <echo> [WARNING] There is already a copy of the library directory in the ouput directory, delete it manually if you want a fresh copy. This is to avoid overriding your change during development.</echo>
  </target>
  
  <target name="html5-copy-libs" description="Copy assets files for development" depends="dita.map.html5.init, check.libs.exists, confirm.libs.exists" if="args.debug" unless="html5.prevent.copy.libs">
  
    <mkdir dir="${output.dir}/${lib.html5.dir.libs}"></mkdir>
    
    <copy todir="${output.dir}/${lib.html5.dir.libs}">
      <fileset dir="${html5.dir}/${lib.html5.dir.libs}"></fileset>
    </copy>

  </target>
  
  <target name="html5-copy-css-user" if="user.copycss.yes">
    <copy file="${args.css.real}" todir="${user.csspath.real}"></copy>
  </target>


  <target name="html5-copy-javascript" description="Copy JavaScript files" depends="dita.map.html5.init" if="html5.doJavaScriptFileCopy">
    <!-- FIXME: Parameterize the location of the JavaScript files -->
    <mkdir dir="${output.dir}/js"></mkdir>
    <copy todir="${output.dir}/js">
      <fileset dir="${html5.dir}/js">
        <include name="**/*"></include>
      </fileset>
    </copy>

  </target>
  
   <!-- FIXME: Move to xsl code directly -->
  <target name="xmltojsonvars" description="Convert XML variables to a json feed" if="html5.site.js.vars.exists">
  
	<property name="xml2json.style" location="${html5.dir}/xsl/xml2json/xml-to-json.xsl"></property>
	
    <mkdir dir="${d4p.html5.json.vars.dir}"></mkdir>
		
	<xslt processor="trax" in="${html5.site.js.vars}" out="${d4p.html5.json.vars.file}" extension=".json" style="${xml2json.style}">
      <param name="jsonp" expression="d4p.setProps"></param>
       
      
	</xslt>

  </target>

  
</project>